175.Combine Two Tables
https://leetcode.com/problems/combine-two-tables/

select p.firstname, p.lastname, a.city, a.state
from person p left join address a
on p.personid = a.personid

176. Second Highest Salary
https://leetcode.com/problems/second-highest-salary/

select (
    select distinct salary 
    from employee e 
    where 1= (select count(distinct salary) 
              from employee where e.salary < salary)

) as SecondHighestSalary

177. Nth Highest Salary
https://leetcode.com/problems/nth-highest-salary/

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      select distinct salary from employee e where N-1=
      (select count(distinct salary) from employee where e.salary < salary)
  );
END

178. Rank Scores
https://leetcode.com/problems/rank-scores/

select score, dense_rank() over(order by score desc) as 'Rank' 
from scores

180. Consecutive Numbers
https://leetcode.com/problems/consecutive-numbers/

select distinct a1.num as ConsecutiveNums
from logs a1 join logs a2 
on a1.id = a2.id-1 and a1.num=a2.num
join logs a3 
on a2.id = a3.id-1 and a2.num = a3.num

181. Employees Earning More Than Their Managers
https://leetcode.com/problems/employees-earning-more-than-their-managers/

select e1.name as employee
from employee e1 inner join employee e2
on e1.managerid = e2.id
where e1.salary > e2.salary

182. Duplicate Emails
https://leetcode.com/problems/duplicate-emails/
select email from person group by email having count(*) > 1

select name as Customers from customers
where id not in (select customerid from orders)

select c.name as customers
from customers c left join orders o
on c.id = o.CustomerId
where o.CustomerId is null

511. Game Play Analysis I
https://leetcode.com/problems/game-play-analysis-i/
512. Game Play Analysis II
https://leetcode.com/problems/game-play-analysis-ii/
534. Game Play Analysis III
https://leetcode.com/problems/game-play-analysis-iii/
550. Game Play Analysis IV
https://leetcode.com/problems/game-play-analysis-iv/
1097. Game Play Analysis V
https://leetcode.com/problems/game-play-analysis-v/

DDL
drop table Activity;
Create table Activity (player_id int, device_id int, event_date date, games_played int);
insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, to_date('2016-03-01','YYYY-MM-DD'), 5);
insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, to_date('2016-03-02','YYYY-MM-DD'), 6);
insert into Activity (player_id, device_id, event_date, games_played) values (2, 3, to_date('2017-06-25','YYYY-MM-DD'), 1);
insert into Activity (player_id, device_id, event_date, games_played) values (3, 1, to_date('2016-03-01','YYYY-MM-DD'), 0);
insert into Activity (player_id, device_id, event_date, games_played) values (3, 4, to_date('2018-07-31','YYYY-MM-DD'), 5);

511. Game Play Analysis I
select player_id, min(event_date) first_login from activity group by player_id

512. Game Play Analysis II
select player_id, device_id
from Activity 
where (player_id, event_date) in 
(select player_id, min(event_date) md
from Activity 
 group by player_id)
 
534. Game Play Analysis III
select  a2.player_id, a2.event_date, sum(a1.games_played) games_played_so_far 
from Activity a1 inner join Activity a2
on a1.player_id = a2.player_id and a1.event_date <= a2.event_date
group by a2.player_id, a2.event_date
order by a2.player_id,a2.event_date;

550. Game Play Analysis IV
select round(count(distinct a2.player_id)/count(distinct a1.player_id),2) fraction  
from
(select player_id, min(event_date) first_login from Activity group by player_id) a1
left join
Activity a2
on a1.first_login + 1 = a2.event_date
and a1.player_id = a2.player_id

1097. Game Play Analysis V
select a1.first_login as install_dt, count(distinct a1.player_id) installs, round(sum(case when a2.event_date is not null then 1 else 0 end) / count(distinct a1.player_id) ,2) Day1_retention  
from
(select player_id, min(event_date) first_login from activity group by player_id) a1 
left join activity a2 
on a1.player_id = a2.player_id and a1.first_login + 1 = a2.event_date
group by install_dt

1484. Group Sold Products By The Date
https://leetcode.com/problems/group-sold-products-by-the-date/

select sell_date, 
count( distinct product) as num_sold, 
GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
from Activities
group by sell_date
order by sell_date

1495. Friendly Movies Streamed Last Month
https://leetcode.com/problems/friendly-movies-streamed-last-month/

select distinct c.title
from TVProgram t
join content c
on t.content_id = c.content_id
where c.kids_content='Y'
and c.content_type='Movies'
and left(t.program_date,7)='2020-06'



1511. Customer Order Frequency
https://leetcode.com/problems/customer-order-frequency/

select customer_id, name
from customers join orders using(customer_id)
join product using(product_id)
group by customer_id
having sum(if(left(order_date,7)='2020-06',quantity, 0)*price)>=100 and
sum(if(left(order_date,7)='2020-07',quantity, 0)*price)>=100

1517. Find Users With Valid E-Mails
https://leetcode.com/problems/find-users-with-valid-e-mails/

SELECT *
FROM Users
WHERE REGEXP_LIKE(mail,'^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$')

1527. Patients With a Condition
https://leetcode.com/problems/patients-with-a-condition/

select patient_id, patient_name, conditions
from patients
where conditions like '%DIAB1%'

1555. Bank Account Summary
https://leetcode.com/problems/bank-account-summary/

select u.user_id,
        u.user_name,
        (u.credit - ifnull(out_tmp.bal_out,0)+ifnull(in_tmp.bal_in,0)) as credit,
        if((u.credit-ifnull(out_tmp.bal_out,0)+ifnull(in_tmp.bal_in,0))>0,'No','Yes') as credit_limit_breached
from users u
left join 
    (select paid_by, 
            sum(amount) as bal_out
    from Transactions
    group by paid_by) out_tmp
on u.user_id = out_tmp.paid_by
left join
    (select paid_to, 
            sum(amount) as bal_in
    from Transactions
    group by paid_to) in_tmp
on u.user_id = in_tmp.paid_to

1543. Fix Product Name Format
https://leetcode.com/problems/fix-product-name-format/

select lower(replace(product_name,' ','')) as product_name, 
left(sale_date,7) as sale_date, 
count(sale_id) as total
from sales
group by 1,2
order by 1,2

1565. Unique Orders and Customers Per Month
https://leetcode.com/problems/unique-orders-and-customers-per-month/

select left(order_date,7) as month, 
count(distinct order_id) as order_count, 
count(distinct customer_id) as customer_count
from
orders
where invoice > 20
group by 1

1571. Warehouse Manager
https://leetcode.com/problems/warehouse-manager/

select w.name as warehouse_name, 
sum(w.units*pn.volume) as volume
from warehouse w
join 
(select product_id, product_name, width*length*height as volume
from products) pn
on w.product_id = pn.product_id
group by w.name

1581. Customer Who Visited but Did Not Make Any Transactions
https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/

select v.customer_id, sum(if(amount is null, 1,0)) as count_no_trans
from visits v left join
transactions t
on v.visit_id = t.visit_id
group by v.customer_id
having sum(if(amount is null, 1,0))>0

1587. Bank Account Summary II
https://leetcode.com/problems/bank-account-summary-ii/

select u.name, sum(t.amount) as balance
from users u 
join transactions t
on u.account= t.account
group by u.account
having sum(t.amount)>10000

1596. The Most Frequently Ordered Products for Each Customer
https://leetcode.com/problems/the-most-frequently-ordered-products-for-each-customer/

SELECT customer_id, product_id, product_name
FROM (
    SELECT O.customer_id, O.product_id, P.product_name, 
    RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(O.product_id) DESC) AS rnk
    FROM Orders O
    JOIN Products P
    ON O.product_id = P.product_id  
    GROUP BY customer_id, product_id
) temp
WHERE rnk = 1 
ORDER BY customer_id, product_id

1607. Sellers With No Sales
https://leetcode.com/problems/sellers-with-no-sales/

select s.seller_name
from 
(select seller_id from orders 
 where sale_date <= '2020-12-31' 
 and sale_date >= '2020-01-01') o 
right join seller s
on o.seller_id = s.seller_id
where o.seller_id is null
order by s.seller_name

1613. Find the Missing IDs
https://leetcode.com/problems/find-the-missing-ids/

with recursive id_seq as 
(select 1 as continue_id 
union select continue_id+1
from id_seq where continue_id < 
(select max(customer_id) from customers))
select continue_id as ids
from id_seq
where continue_id not in (select customer_id from customers)

1623. All Valid Triplets That Can Represent a Country
https://leetcode.com/problems/all-valid-triplets-that-can-represent-a-country/

select sa.student_name as member_A, 
sb.student_name as member_B, 
sc.student_name as member_C
from SchoolA sa cross join SchoolB sb
cross join SchoolC sc
where sa.student_id != sb.student_id
and sb.student_id != sc.student_id
and sa.student_id != sc.student_id
and sa.student_name != sb.student_name
and sb.student_name != sc.student_name
and sa.student_name != sc.student_name

1633. Percentage of Users Attended a Contest
https://leetcode.com/problems/percentage-of-users-attended-a-contest/

select r.contest_id, 
round(count(distinct r.user_id)/(select count(distinct user_id) from users)*100,2) as percentage
from users u right join register r 
on u.user_id = r.user_id
group by r.contest_id
order by percentage desc, contest_id 
