175.Combine Two Tables
https://leetcode.com/problems/combine-two-tables/

select p.firstname, p.lastname, a.city, a.state
from person p left join address a
on p.personid = a.personid

176. Second Highest Salary
https://leetcode.com/problems/second-highest-salary/

select (
    select distinct salary 
    from employee e 
    where 1= (select count(distinct salary) 
              from employee where e.salary < salary)

) as SecondHighestSalary

177. Nth Highest Salary
https://leetcode.com/problems/nth-highest-salary/

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      select distinct salary from employee e where N-1=
      (select count(distinct salary) from employee where e.salary < salary)
  );
END

178. Rank Scores
https://leetcode.com/problems/rank-scores/

select score, dense_rank() over(order by score desc) as 'Rank' 
from scores

180. Consecutive Numbers
https://leetcode.com/problems/consecutive-numbers/

select distinct a1.num as ConsecutiveNums
from logs a1 join logs a2 
on a1.id = a2.id-1 and a1.num=a2.num
join logs a3 
on a2.id = a3.id-1 and a2.num = a3.num

181. Employees Earning More Than Their Managers
https://leetcode.com/problems/employees-earning-more-than-their-managers/

select e1.name as employee
from employee e1 inner join employee e2
on e1.managerid = e2.id
where e1.salary > e2.salary

182. Duplicate Emails
https://leetcode.com/problems/duplicate-emails/
select email from person group by email having count(*) > 1

183. Customers Who Never Order
https://leetcode.com/problems/customers-who-never-order/

select name as Customers from customers
where id not in (select customerid from orders)

select c.name as customers
from customers c left join orders o
on c.id = o.CustomerId
where o.CustomerId is null

184. Department Highest Salary
https://leetcode.com/problems/department-highest-salary/

select d.name as department, e.name as employee, e.salary
from employee e join department d
on e.departmentid = d.id
where (e.departmentid,e.salary)
in
(select departmentid, max(salary) ms
from employee
group by departmentid)

185. Department Top Three Salaries
https://leetcode.com/problems/department-top-three-salaries/

select d.name as department, e.name as employee, e.salary
from employee e join department d
on e.departmentid = d.id
where 2 >=(select count(distinct salary) from employee where e.salary <salary and e.departmentid = departmentid)

select d.name as department, e.name as employee, e.salary
from 
(select *, dense_rank() over(partition by departmentid order by salary desc) as rnk
 from employee) e 
join department d
on e.DepartmentId = d.id
where e.rnk <=3

196. Delete Duplicate Emails
https://leetcode.com/problems/delete-duplicate-emails/

delete p1 from
person p1 join person p2
on p1.email = p2.email
where p1.id > p2.id

197. Rising Temperature
https://leetcode.com/problems/rising-temperature/

select w2.id
from weather w1
join weather w2
on to_days(w1.recorddate)+1 = to_days(w2.recorddate)
where w2.temperature > w1.temperature

262. Trips and Users
https://leetcode.com/problems/trips-and-users/

select request_at as day, 
round(sum(case when status like 'cancelled%' then 1 else 0 end )/count(*),2) as "Cancellation Rate"
from trips
where client_id not in 
(select users_id
 from users 
 where banned='Yes')
and driver_id not in
(select users_id
 from users 
 where banned='Yes')
and request_at between '2013-10-01' and '2013-10-03'
 group by request_at
 

511. Game Play Analysis I
https://leetcode.com/problems/game-play-analysis-i/
512. Game Play Analysis II
https://leetcode.com/problems/game-play-analysis-ii/
534. Game Play Analysis III
https://leetcode.com/problems/game-play-analysis-iii/
550. Game Play Analysis IV
https://leetcode.com/problems/game-play-analysis-iv/
1097. Game Play Analysis V
https://leetcode.com/problems/game-play-analysis-v/

DDL
drop table Activity;
Create table Activity (player_id int, device_id int, event_date date, games_played int);
insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, to_date('2016-03-01','YYYY-MM-DD'), 5);
insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, to_date('2016-03-02','YYYY-MM-DD'), 6);
insert into Activity (player_id, device_id, event_date, games_played) values (2, 3, to_date('2017-06-25','YYYY-MM-DD'), 1);
insert into Activity (player_id, device_id, event_date, games_played) values (3, 1, to_date('2016-03-01','YYYY-MM-DD'), 0);
insert into Activity (player_id, device_id, event_date, games_played) values (3, 4, to_date('2018-07-31','YYYY-MM-DD'), 5);

511. Game Play Analysis I
select player_id, min(event_date) first_login from activity group by player_id

512. Game Play Analysis II
select player_id, device_id
from Activity 
where (player_id, event_date) in 
(select player_id, min(event_date) md
from Activity 
 group by player_id)
 
select player_id, device_id
from(
select player_id, device_id, rank() over(partition by player_id order by event_date) as rnk
from activity) a
where rnk=1
 
534. Game Play Analysis III
select  a2.player_id, a2.event_date, sum(a1.games_played) games_played_so_far 
from Activity a1 inner join Activity a2
on a1.player_id = a2.player_id and a1.event_date <= a2.event_date
group by a2.player_id, a2.event_date
order by a2.player_id,a2.event_date;

550. Game Play Analysis IV
select round(count(distinct a2.player_id)/count(distinct a1.player_id),2) fraction  
from
(select player_id, min(event_date) first_login from Activity group by player_id) a1
left join
Activity a2
on a1.first_login + 1 = a2.event_date
and a1.player_id = a2.player_id

569. Median Employee Salary
https://leetcode.com/problems/median-employee-salary/

with t1 as(
select *, row_number() over(partition by Company order by Salary) as rnk,
count(Id) over(partition by Company) as cnt
from Employee )

select Id, Company, Salary
from t1
where rnk between cnt/2 and cnt/2+1;

570. Managers with at Least 5 Direct Reports
https://leetcode.com/problems/managers-with-at-least-5-direct-reports/

select e.name
from
(select managerid
from employee
group by managerid
having count(id) >=5) a join employee e
on a.managerid = e.id

571. Find Median Given Frequency of Numbers
https://leetcode.com/problems/find-median-given-frequency-of-numbers/

select avg(n.number) as median 
from numbers n
where n.frequency >= abs((select sum(frequency) from numbers where n.number >= number) -
(select sum(frequency) from numbers where n.number <= number))

574. Winning Candidate
https://leetcode.com/problems/winning-candidate/

select Name from Candidate where id = (select candidateid from Vote group by candidateid order by count(candidateid) desc limit 1)

577. Employee Bonus
https://leetcode.com/problems/employee-bonus/

select e.name, b.bonus
from employee e
left join bonus b
on e.empid = b.empid
where b.bonus < 1000 or b.bonus is null

578. Get Highest Answer Rate Question
https://leetcode.com/problems/get-highest-answer-rate-question/

with tmp as (
select
    question_id,
    sum(case when answer_id is not Null then 1 else 0 end) / count(*) as rate
from survey_log
group by question_id)

select
question_id as survey_log
from tmp
where rate in (select max(rate) from tmp)

579. Find Cumulative Salary of an Employee
https://leetcode.com/problems/find-cumulative-salary-of-an-employee/

select a.id, a.month, a.salary from

(select id, month, sum(salary) over (partition by id order by month rows between 2 preceding and 0 following) as Salary, rank() over (partition by id order by month desc) as rank from Employee) a

where a.rank !=1 order by a.id, a.month desc

SELECT   A.Id, MAX(B.Month) as Month, SUM(B.Salary) as Salary
FROM     Employee A, Employee B
WHERE    A.Id = B.Id AND B.Month BETWEEN (A.Month-3) AND (A.Month-1)
GROUP BY A.Id, A.Month
ORDER BY Id, Month DESC

580. Count Student Number in Departments
https://leetcode.com/problems/count-student-number-in-departments/

select d.dept_name, count(s.student_id) as student_number
from student s
right join department d
on s.dept_id = d.dept_id
group by d.dept_id
order by student_number desc, d.dept_name

584. Find Customer Referee
https://leetcode.com/problems/find-customer-referee/

select name from customer
where referee_id != 2 or referee_id is null

585. Investments in 2016
https://leetcode.com/problems/investments-in-2016/

select sum(a.tiv_2016) as TIV_2016
from insurance a
where a.tiv_2015 in 
(select tiv_2015 
 from insurance
group by tiv_2015
having count(pid)>1)
and (a.lat,a.lon) in 
(select lat, lon
from insurance
group by concat(lat,',',lon)
having count(pid)=1)

586. Customer Placing the Largest Number of Orders
https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/

select customer_number
from orders
group by customer_number
order by count(order_number) desc limit 1
follow-up
SELECT customer_number
FROM orders
GROUP BY customer_number
HAVING COUNT(order_number) = (
	SELECT COUNT(order_number) cnt
	FROM orders
	GROUP BY customer_number
	ORDER BY cnt DESC
	LIMIT 1
)

595. Big Countries
https://leetcode.com/problems/big-countries/

select name,population, area
from world
where area > 3000000 or population > 25000000

596. Classes More Than 5 Students
https://leetcode.com/problems/classes-more-than-5-students/

select class
from courses
group by class
having count(distinct student)>=5

597. Friend Requests I: Overall Acceptance Rate
https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate/

select round(ifnull((select count(distinct concat(requester_id,',',accepter_id)) from request_accepted)/
(select count(distinct concat(sender_id,',',send_to_id)) from friend_request),0),2) as accept_rate

follow-up
1.Can you write a query to return the accept rate but for every month?

with a as 
(select left(request_date,7) as month, count(distinct concat(sender_id, ',', send_to_id)) as send 
 from friend_request
 group by 1
), 
b as  
(select left(accept_date,7) as month, count(distinct concat(requester_id, ',', accepter_id)) as accept
 from request_accepted
 group by 1
)
select a.month, round(ifnull(b.accept/a.send,0),2) as monthly_rate
from a join b on a.month = b.month

2.How about the cumulative accept rate for every day?
## sum up the case when ind is 'a', which means it belongs to accept table, divided by sum of ind is 'r', which means it belong to request table
select s.date1, ifnull(round(sum(case when t.ind = 'a' then t.cnt else 0 end)/sum(case when t.ind = 'r' then t.cnt else 0 end),2),0) 
from
## get a table of all unique dates
(select distinct x.request_date as date1 from friend_request x
## The reason here use union sicne we don't want duplicate date
union 
 select distinct y.accept_date as date1 from request_accepted y 
) s
## left join to make sure all dates are in the final output
left join 
## get a table of all dates, count of each days, ind to indicate which table it comes from
(select v.request_date as date1, count(*) as cnt,'r' as ind from friend_request v group by v.request_date
## The reason here use union all sicne union all will be faster
union all
select w.accept_date as date1, count(*) as cnt,'a' as ind from request_accepted w group by w.accept_date) t
## s.date1 >= t.date1, which for each reacord in s, it will join with all records earlier than it in t
on s.date1 >= t.date1
# group by s.date1 then we can get a cumulative result to that day
group by s.date1
order by s.date1
;

601. Human Traffic of Stadium
https://leetcode.com/problems/human-traffic-of-stadium/

select cte.id, cte.visit_date, cte.people
from
(SELECT ID
        , visit_date
        , people
        , LEAD(people, 1) OVER (ORDER BY id) nxt
        , LEAD(people, 2) OVER (ORDER BY id) nxt2
        , LAG(people, 1) OVER (ORDER BY id) pre
        , LAG(people, 2) OVER (ORDER BY id) pre2
    FROM Stadium
) as cte
where (cte.people >=100 and cte.nxt>=100 and cte.nxt2>=100)
or (cte.people >=100 and cte.nxt>=100 and cte.pre>=100)
or (cte.people >=100 and cte.pre>=100 and cte.pre2>=100)

602. Friend Requests II: Who Has the Most Friends
https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/

select b.id, b.num
from 
(select a.requester_id as id, count(*) as num, dense_rank() over(order by count(*) desc) as rnk
from
(
(select requester_id, accepter_id from request_accepted)
union
(select accepter_id, requester_id from request_accepted)
) a
group by a.requester_id) b
where b.rnk=1

603. Consecutive Available Seats
https://leetcode.com/problems/consecutive-available-seats/

select a.seat_id
from
(select seat_id, 
free, 
lead(free,1) over(order by seat_id) nxt, 
lag(free,1) over(order by seat_id) pre
from cinema) a
where (a.free=1 and a.nxt=1)
or (a.pre=1 and a.free=1)
order by a.seat_id

607. Sales Person
https://leetcode.com/problems/sales-person/

select name from salesperson
where sales_id
not in
(select sales_id
from orders
where com_id
in
(select com_id from company where name = 'RED'))

608. Tree Node
https://leetcode.com/problems/tree-node/

select distinct t1.id,
(case when t1.p_id is null then 'Root' 
 when t2.p_id is not null then 'Inner'
 when t2.p_id is null and t2.id is null then 'Leaf' end) as type
from tree t1
left join tree t2
on t1.id = t2.p_id

610. Triangle Judgement
https://leetcode.com/problems/triangle-judgement/

select *, case when x+y > z and y+z > x and x+z > y then 'Yes' else 'No' end as triangle
from triangle

612. Shortest Distance in a Plane
https://leetcode.com/problems/shortest-distance-in-a-plane/submissions/

select round(sqrt(pow(p1.x - p2.x,2) + pow(p1.y - p2.y,2)),2) as shortest
from point_2d p1, point_2d p2
where p1.x != p2.x or p1.y != p2.y
order by 1 limit 1

613. Shortest Distance in a Line
https://leetcode.com/problems/shortest-distance-in-a-line/

select min(abs(p1.x-p2.x)) as shortest
from point p1, point p2
where p1.x != p2.x

614. Second Degree Follower
https://leetcode.com/problems/second-degree-follower/

select f1.follower as follower, count( distinct f2.follower) as num
from follow f1 join follow f2 
on f1.follower = f2.followee
group by f1.follower
order by f1.follower

615. Average Salary: Departments VS Company
https://leetcode.com/problems/average-salary-departments-vs-company/

with a as 
(
select left(s.pay_date,7) as pay_month, e.department_id, avg(s.amount) as avg_sa  
    from salary s join employee e
    on s.employee_id = e.employee_id
    group by 1, 2 
),

b as 
(
select left(s.pay_date,7) as pay_month, avg(s.amount) as avg_sa
    from salary s
    group by 1
)

select a.pay_month, a.department_id, 
(case when a.avg_sa > b.avg_sa then 'higher' 
 when  a.avg_sa = b.avg_sa then 'same'
 else 'lower' end) as comparison
from a join b 
on a.pay_month = b.pay_month

618. Students Report By Geography
https://leetcode.com/problems/students-report-by-geography/

select max(case when continent = 'America' then name end) as 'America',
    max(case when continent = 'Asia' then name end) as 'Asia',
    max(case when continent = 'Europe' then name end) as 'Europe'
from 
(select *, row_number() over(partition by continent order by name) as row_id from student) a
group by a.row_id

619. Biggest Single Number
https://leetcode.com/problems/biggest-single-number/

select (select num
from my_numbers
group by num
having count(*) = 1
order by num desc limit 1) as num

620. Not Boring Movies
https://leetcode.com/problems/not-boring-movies/

select * 
from cinema
where id % 2 = 1 and description not like "boring"
order by rating desc

626. Exchange Seats
https://leetcode.com/problems/exchange-seats/

select (case when id %2 = 1 and id = (select max(id) from seat) then id
        when id % 2 = 1 then id+1 
        when id % 2 =0 then id-1 end) as id, 
        student
from seat
order by id

627. Swap Salary
https://leetcode.com/problems/swap-salary/

update salary
set sex = (case when sex = 'f' then 'm' else 'f' end)

1045. Customers Who Bought All Products
https://leetcode.com/problems/customers-who-bought-all-products/

select customer_id
from customer
group by customer_id
having count(distinct product_key) = 
(select count(distinct product_key) from product)

1050. Actors and Directors Who Cooperated At Least Three Times
https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/

select actor_id, director_id
from ActorDirector
group by actor_id, director_id
having count(*)>=3

1068. Product Sales Analysis I
https://leetcode.com/problems/product-sales-analysis-i/

SELECT p.product_name, s.year, s.price
FROM product p inner join sales s
ON p.product_id = s.product_id

1069. Product Sales Analysis II
https://leetcode.com/problems/product-sales-analysis-ii/

SELECT product_id, sum(quantity) as total_quantity
FROM sales
GROUP BY product_id

1070. Product Sales Analysis III
https://leetcode.com/problems/product-sales-analysis-iii/

SELECT product_id, 
year as first_year,
quantity,
price
FROM 
(SELECT *, rank() over(partition by product_id order by year) as rnk
FROM sales) a
where rnk=1

1075. Project Employees I
https://leetcode.com/problems/project-employees-i/

SELECT p.project_id, round(avg(e.experience_years),2) as average_years
FROM project p join employee e
ON p.employee_id = e.employee_id
GROUP BY p.project_id

1076. Project Employees II
https://leetcode.com/problems/project-employees-ii/

SELECT project_id
FROM project
GROUP BY project_id
HAVING COUNT(employee_id) =
(
    SELECT count(employee_id)
    FROM project
    GROUP BY project_id
    ORDER BY count(employee_id) desc
    LIMIT 1
)

1077. Project Employees III
https://leetcode.com/problems/project-employees-iii/

SELECT project_id, employee_id
FROM
(SELECT p.project_id, e.employee_id, rank() over(partition by p.project_id order by e.experience_years desc) as rnk  
FROM project p join employee e
on p.employee_id = e.employee_id) a
WHERE rnk=1

1082. Sales Analysis I
https://leetcode.com/problems/sales-analysis-i/

SELECT seller_id
FROM sales
GROUP BY seller_id
HAVING sum(price)=
(SELECT sum(price) as sp
FROM sales
GROUP BY seller_id
ORDER BY 1 DESC
limit 1)

1083. Sales Analysis II
https://leetcode.com/problems/sales-analysis-ii/

SELECT s.buyer_id
FROM sales s join product p
ON s.product_id = p.product_id 
GROUP BY s.buyer_id
having sum(case when p.product_name = 'S8' then 1 else 0 end)>0
and sum(case when p.product_name = 'Iphone' then 1 else 0 end)=0

1084. Sales Analysis III
https://leetcode.com/problems/sales-analysis-iii/

SELECT p.product_id, p.product_name
from product p join sales s
ON p.product_id = s.product_id
group by p.product_id, p.product_name
having min(sale_date) >= '2019-01-01' and max(sale_date) <='2019-03-31'

1097. Game Play Analysis V
select a1.first_login as install_dt, count(distinct a1.player_id) installs, round(sum(case when a2.event_date is not null then 1 else 0 end) / count(distinct a1.player_id) ,2) Day1_retention  
from
(select player_id, min(event_date) first_login from activity group by player_id) a1 
left join activity a2 
on a1.player_id = a2.player_id and a1.first_login + 1 = a2.event_date
group by install_dt

1445. Apples & Oranges
https://leetcode.com/problems/apples-oranges/

select sale_date, sum(case when fruit='apples' then sold_num else -sold_num end) as diff
from sales
group by sale_date

1454. Active Users
https://leetcode.com/problems/active-users/

select distinct l1.id, a.name
from
logins l1 join logins l2
on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4
join accounts a 
on l1.id = a.id
group by l1.id, l1.login_date
having count(distinct l2.login_date)=4 

1459. Rectangles Area
https://leetcode.com/problems/rectangles-area/

SELECT  pt1.id as P1, pt2.id as P2,
		ABS(pt1.x_value - pt2.x_value)*ABS(pt1.y_value-pt2.y_value) as AREA
FROM Points pt1 JOIN Points pt2 
ON pt1.id<pt2.id
AND pt1.x_value!=pt2.x_value 
AND pt2.y_value!=pt1.y_value
ORDER BY AREA DESC, p1, p2

1468. Calculate Salaries
https://leetcode.com/problems/calculate-salaries/

select b.company_id, 
b.employee_id, 
b.employee_name, 
round(b.salary*(1-a.rate)) as salary
from 
(select company_id, 
case when max(salary)> 10000 then 0.49
when max(salary)>= 1000 and max(salary)<= 10000 then 0.24 else 0 end as rate
from salaries
group by company_id) a
join salaries b 
on a.company_id = b.company_id


1479. Sales by Day of the Week
https://leetcode.com/problems/sales-by-day-of-the-week/

select i.item_category as Category,
sum(case when dayofweek(o.order_date)=2 then quantity else 0 end) as 'Monday',
sum(case when dayofweek(o.order_date)=3 then quantity else 0 end) as 'Tuesday',
sum(case when dayofweek(o.order_date)=4 then quantity else 0 end) as 'Wednesday',
sum(case when dayofweek(o.order_date)=5 then quantity else 0 end) as 'Thursday',
sum(case when dayofweek(o.order_date)=6 then quantity else 0 end) as 'Friday',
sum(case when dayofweek(o.order_date)=7 then quantity else 0 end) as 'Saturday',
sum(case when dayofweek(o.order_date)=1 then quantity else 0 end) as 'Sunday'
from items i left join
orders o
on i.item_id = o.item_id
group by i.item_category
order by i.item_category

1484. Group Sold Products By The Date
https://leetcode.com/problems/group-sold-products-by-the-date/

select sell_date, 
count( distinct product) as num_sold, 
GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
from Activities
group by sell_date
order by sell_date

1495. Friendly Movies Streamed Last Month
https://leetcode.com/problems/friendly-movies-streamed-last-month/

select distinct c.title
from TVProgram t
join content c
on t.content_id = c.content_id
where c.kids_content='Y'
and c.content_type='Movies'
and left(t.program_date,7)='2020-06'

1501. Countries You Can Safely Invest In
https://leetcode.com/problems/countries-you-can-safely-invest-in/

select con.name as country
from person p join calls c
on p.id = c.caller_id or p.id = c.callee_id
join country con 
on left(p.phone_number,3) = con.country_code
group by con.name
having avg(c.duration) >(select avg(duration) from calls)

1511. Customer Order Frequency
https://leetcode.com/problems/customer-order-frequency/

select customer_id, name
from customers join orders using(customer_id)
join product using(product_id)
group by customer_id
having sum(if(left(order_date,7)='2020-06',quantity, 0)*price)>=100 and
sum(if(left(order_date,7)='2020-07',quantity, 0)*price)>=100

1517. Find Users With Valid E-Mails
https://leetcode.com/problems/find-users-with-valid-e-mails/

SELECT *
FROM Users
WHERE REGEXP_LIKE(mail,'^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$')

1527. Patients With a Condition
https://leetcode.com/problems/patients-with-a-condition/

select patient_id, patient_name, conditions
from patients
where conditions like '%DIAB1%'

1532. The Most Recent Three Orders
https://leetcode.com/problems/the-most-recent-three-orders/

select c.name as customer_name,
                c.customer_id,
                o.order_id,
                o.order_date
from 
(select customer_id, order_id, order_date,
RANK() over (PARTITION by customer_id order by order_date desc) as rnk
from orders) o
join customers c
on o.customer_id=c.customer_id
where o.rnk <=3
order by c.name, c.customer_id, o.order_date desc

1543. Fix Product Name Format
https://leetcode.com/problems/fix-product-name-format/

select lower(replace(product_name,' ','')) as product_name, 
left(sale_date,7) as sale_date, 
count(sale_id) as total
from sales
group by 1,2
order by 1,2

1549. The Most Recent Orders for Each Product
https://leetcode.com/problems/the-most-recent-orders-for-each-product/

select p.product_name, p.product_id, o.order_id, o.order_date
from orders o
join products p
on o.product_id = p.product_id
where (o.product_id, o.order_date) 
in 
(select product_id, max(order_date) md
from orders
group by product_id)
order by p.product_name, p.product_id, o.order_id

1555. Bank Account Summary
https://leetcode.com/problems/bank-account-summary/

select u.user_id,
        u.user_name,
        (u.credit - ifnull(out_tmp.bal_out,0)+ifnull(in_tmp.bal_in,0)) as credit,
        if((u.credit-ifnull(out_tmp.bal_out,0)+ifnull(in_tmp.bal_in,0))>0,'No','Yes') as credit_limit_breached
from users u
left join 
    (select paid_by, 
            sum(amount) as bal_out
    from Transactions
    group by paid_by) out_tmp
on u.user_id = out_tmp.paid_by
left join
    (select paid_to, 
            sum(amount) as bal_in
    from Transactions
    group by paid_to) in_tmp
on u.user_id = in_tmp.paid_to


1565. Unique Orders and Customers Per Month
https://leetcode.com/problems/unique-orders-and-customers-per-month/

select left(order_date,7) as month, 
count(distinct order_id) as order_count, 
count(distinct customer_id) as customer_count
from
orders
where invoice > 20
group by 1

1571. Warehouse Manager
https://leetcode.com/problems/warehouse-manager/

select w.name as warehouse_name, 
sum(w.units*pn.volume) as volume
from warehouse w
join 
(select product_id, product_name, width*length*height as volume
from products) pn
on w.product_id = pn.product_id
group by w.name

1581. Customer Who Visited but Did Not Make Any Transactions
https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/

select v.customer_id, sum(if(amount is null, 1,0)) as count_no_trans
from visits v left join
transactions t
on v.visit_id = t.visit_id
group by v.customer_id
having sum(if(amount is null, 1,0))>0

1587. Bank Account Summary II
https://leetcode.com/problems/bank-account-summary-ii/

select u.name, sum(t.amount) as balance
from users u 
join transactions t
on u.account= t.account
group by u.account
having sum(t.amount)>10000

1596. The Most Frequently Ordered Products for Each Customer
https://leetcode.com/problems/the-most-frequently-ordered-products-for-each-customer/

SELECT customer_id, product_id, product_name
FROM (
    SELECT O.customer_id, O.product_id, P.product_name, 
    RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(O.product_id) DESC) AS rnk
    FROM Orders O
    JOIN Products P
    ON O.product_id = P.product_id  
    GROUP BY customer_id, product_id
) temp
WHERE rnk = 1 
ORDER BY customer_id, product_id

1607. Sellers With No Sales
https://leetcode.com/problems/sellers-with-no-sales/

select s.seller_name
from 
(select seller_id from orders 
 where sale_date <= '2020-12-31' 
 and sale_date >= '2020-01-01') o 
right join seller s
on o.seller_id = s.seller_id
where o.seller_id is null
order by s.seller_name

1613. Find the Missing IDs
https://leetcode.com/problems/find-the-missing-ids/

with recursive id_seq as 
(select 1 as continue_id 
union select continue_id+1
from id_seq where continue_id < 
(select max(customer_id) from customers))
select continue_id as ids
from id_seq
where continue_id not in (select customer_id from customers)

1623. All Valid Triplets That Can Represent a Country
https://leetcode.com/problems/all-valid-triplets-that-can-represent-a-country/

select sa.student_name as member_A, 
sb.student_name as member_B, 
sc.student_name as member_C
from SchoolA sa cross join SchoolB sb
cross join SchoolC sc
where sa.student_id != sb.student_id
and sb.student_id != sc.student_id
and sa.student_id != sc.student_id
and sa.student_name != sb.student_name
and sb.student_name != sc.student_name
and sa.student_name != sc.student_name

1633. Percentage of Users Attended a Contest
https://leetcode.com/problems/percentage-of-users-attended-a-contest/

select r.contest_id, 
round(count(distinct r.user_id)/(select count(distinct user_id) from users)*100,2) as percentage
from users u right join register r 
on u.user_id = r.user_id
group by r.contest_id
order by percentage desc, contest_id 
